generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
//   email     String?  @unique

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       String
  quantity    String
  brandId     String
  categoryId  String
  brand       Brand?    @relation(fields: [brandId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  images      Image[]
  size        Size[]
  color       Color[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
}

model Brand {
  id          String    @id @default(cuid())
  title       String
  description String?
  Product     Product[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
}

model Category {
  id          String    @id @default(cuid())
  title       String
  description String?
  Product     Product[]
  Size        Size[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
}

model Color {
  id          String   @id @default(cuid())
  title       String
  color       String
  description String?
  productId   String?
  Product     Product? @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
}

model Size {
  id          String    @id @default(cuid())
  size        String
  description String?
  productId   String?
  categoryId  String?
  Product     Product?  @relation(fields: [productId], references: [id])
  Category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
}

model Image {
  id          String   @id @default(cuid())
  title       String
  description String?
  productId   String?
  Product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}
